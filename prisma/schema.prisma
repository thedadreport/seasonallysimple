generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(uuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id               String          @id @default(uuid())
  name             String?
  firstName        String?
  lastName         String?
  email            String          @unique
  emailVerified    DateTime?
  password         String?
  image            String?
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  resetToken       String?         @unique
  resetTokenExpiry DateTime?
  accounts         Account[]
  mealPlans        MealPlan[]
  savedRecipes     SavedRecipe[]
  sessions         Session[]
  comments         RecipeComment[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Recipe {
  id            String          @id @default(uuid())
  title         String
  description   String
  prepTime      Int
  cookTime      Int
  totalTime     Int
  servings      Int
  difficulty    String
  season        String
  cuisineType   String
  dietaryTags   String
  imageUrl      String?
  isAIGenerated Boolean         @default(false)
  tips          String?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @default(now()) @updatedAt
  Ingredient    Ingredient[]
  Instruction   Instruction[]
  mealPlanItems MealPlanItem[]
  NutritionInfo NutritionInfo?
  savedBy       SavedRecipe[]
  comments      RecipeComment[]
}

model SavedRecipe {
  id        String   @id @default(uuid())
  userId    String
  recipeId  String
  createdAt DateTime @default(now())
  recipe    Recipe   @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, recipeId])
}

model MealPlan {
  id        String         @id @default(uuid())
  userId    String
  name      String
  startDate DateTime
  endDate   DateTime
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  user      User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  items     MealPlanItem[]
}

model MealPlanItem {
  id         String   @id @default(uuid())
  mealPlanId String
  recipeId   String
  date       DateTime
  mealType   String
  mealPlan   MealPlan @relation(fields: [mealPlanId], references: [id], onDelete: Cascade)
  recipe     Recipe   @relation(fields: [recipeId], references: [id], onDelete: Cascade)
}

model Ingredient {
  id       String  @id
  recipeId String
  amount   String
  unit     String?
  name     String
  Recipe   Recipe  @relation(fields: [recipeId], references: [id], onDelete: Cascade)
}

model Instruction {
  id         String @id
  recipeId   String
  stepNumber Int
  text       String
  Recipe     Recipe @relation(fields: [recipeId], references: [id], onDelete: Cascade)

  @@unique([recipeId, stepNumber])
}

model NutritionInfo {
  id       String @id
  recipeId String @unique
  calories Int
  protein  Float
  carbs    Float
  fat      Float
  fiber    Float?
  sodium   Float?
  Recipe   Recipe @relation(fields: [recipeId], references: [id], onDelete: Cascade)
}

model RecipeComment {
  id        String   @id @default(uuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  recipeId  String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  recipe    Recipe   @relation(fields: [recipeId], references: [id], onDelete: Cascade)
}
